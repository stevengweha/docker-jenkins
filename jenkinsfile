pipeline {
    agent any  

    environment {
        CONTAINER_ID = ""  // ID du conteneur existant
        SUM_PY_PATH = "./sum.py"  // Chemin du script Python
        DIR_PATH = "./"  // R√©pertoire contenant le Dockerfile
        TEST_FILE_PATH = "./test_variables.txt"  // Fichier contenant les valeurs de test
    }
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/stevengweha/docker-jenkins.git'
            }
        }

        stage('Check Running Container') {
            steps {
                script {
                    def output = sh(script: 'docker ps -q -f ancestor=sum-app', returnStdout: true).trim()

                    if (output.isEmpty()) {
                        error "‚ö†Ô∏è Aucun conteneur existant trouv√© pour l‚Äôimage sum-app ! Lancez-le avant d‚Äôex√©cuter la pipeline."
                    } else {
                        echo "‚úÖ Conteneur existant d√©tect√© : ${output}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                bat 'echo Running tests...'
                // Ajoute ici les commandes pour ex√©cuter tes tests
            }
        }

        stage('Deploy') {
            steps {
                bat 'echo D√©ploiement en cours...'
                // Ajoute ici les commandes pour le d√©ploiement si n√©cessaire
            }
        }
    }

    post {
        always {
            script {
                def output = bat(script: 'docker ps -q -f ancestor=sum-app', returnStdout: true).trim()
                if (!output.isEmpty()) {
                    echo "üßπ Nettoyage du conteneur..."
                    bat "docker stop ${output}"
                } else {
                    echo "‚ö†Ô∏è Aucun conteneur trouv√© pour nettoyage."
                }
            }
        }
    }
}
